//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.32559
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestProject.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TestProject.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  ARITHMETICS.
        ///; -------------------------------------------------------------------------
        ///;  This program is intended to fail with a divide by zero error.
        ///;
        ///;  - Direct Addessing is where arithmetic is done with registers only.
        ///;  - Immediate Addressing is where arithmetic is done with a register
        ///;    and a numeric value.
        ///; -------------------------------------------------------------------------
        ///
        ///; Addition
        ///	MOV	AL,02	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string arithmetics {
            get {
                return ResourceManager.GetString("arithmetics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 02 D0 01 02 A0 00 
        ///01 B0 00 02 A4 00 D0 00 
        ///7F D0 01 01 A0 00 01 D0 
        ///00 08 D0 01 05 A1 00 01 
        ///B1 00 02 A5 00 D0 00 05 
        ///D0 01 08 A1 00 01 D0 00 
        ///02 D0 01 02 A2 00 01 B2 
        ///00 02 D0 00 55 D0 01 02 
        ///A2 00 01 D0 00 55 B6 00 
        ///10 D0 00 76 D0 03 20 A6 
        ///00 03 D0 00 10 D0 01 02 
        ///A3 00 01 B3 00 02 D0 00 
        ///10 D0 01 00 A3 00 01 D0 
        ///00 10 B3 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string arithmetics_bin {
            get {
                return ResourceManager.GetString("arithmetics_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; --------------------------------------------------------------------
        ///; 
        ///; Programname:	BubbleSortTst01
        ///; Purpose:	sort data table
        ///; Description:	this program is used to test the microprocessor
        ///;		simulator m2Sim.
        ///;		With this program a data table is sorted. Sort
        ///;		technique used is bubble sort, not optimized. 
        ///;		watch out: negative numbers will become first in table
        ///; Author:	Urs Lüchinger
        ///; History:	4.09.2003 original version 	
        ///; 
        ///; ---------------------------------------------------------- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BubbleSortTst01 {
            get {
                return ResourceManager.GetString("BubbleSortTst01", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 10 00 64 78 31 48 00 
        ///12 04 00 00 00 00 00 00 
        ///D0 00 01 DC 00 02 C1 3C 
        ///D2 02 00 D0 02 03 D0 03 
        ///07 A5 03 DB 03 00 C1 EA 
        ///D3 00 02 A4 02 D3 01 02 
        ///DA 00 01 C1 EE C3 EC AC 
        ///00 01 AC 01 00 AC 00 01 
        ///A5 02 D4 02 00 A4 02 D4 
        ///02 01 D0 00 00 D2 02 00 
        ///C0 D1 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BubbleSortTst01_bin {
            get {
                return ResourceManager.GetString("BubbleSortTst01_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ADD AL,02
        ///CALL 80
        ///ADD AL,02
        ///
        ///HALT
        ///
        ///
        ///ORG 80
        ///ADD BL, 04
        ///CALL 90
        ///ADD BL, 04
        ///CALL 90
        ///RET
        ///
        ///ORG 90
        ///ADD DL,03
        ///RET
        ///
        ///END
        ///.
        /// </summary>
        internal static string call_test {
            get {
                return ResourceManager.GetString("call_test", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to B0 00 02 CA 80 B0 00 02 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///B0 01 04 CA 90 B0 01 04 
        ///CA 90 CB 00 00 00 00 00 
        ///B0 03 03 CB 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string call_test_bin {
            get {
                return ResourceManager.GetString("call_test_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  PROCEDURE CALLS.
        ///;  There is no recursion.
        ///; -------------------------------------------------------------------------
        ///
        ///; -------------------------------------------------------------------------
        ///;  Main program
        ///; -------------------------------------------------------------------------
        ///Rep:
        ///	CALL	30	; Call the procedures at these addresses.
        ///	CALL	40
        ///	CALL	50
        ///	CALL	60
        ///	CALL	70
        ///	CALL	80
        ///	CALL	90
        ///	JMP	Rep	; Jump bac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string callDemo {
            get {
                return ResourceManager.GetString("callDemo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CA 30 CA 40 CA 50 CA 60 
        ///CA 70 CA 80 CA 90 C0 F2 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///CA 40 CA 50 CA 60 CA 70 
        ///CA 80 CA 90 CB 00 00 00 
        ///CA 50 CA 60 CA 70 CA 80 
        ///CA 90 CB 00 00 00 00 00 
        ///CA 60 CA 70 CA 80 CA 90 
        ///CB 00 00 00 00 00 00 00 
        ///CA 70 CA 80 CA 90 CB 00 
        ///00 00 00 00 00 00 00 00 
        ///CA 80 CA 90 CB 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///CA 90 CB 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///FF E1 00 E0 00 E1 01 E0 
        ///01 E1 02 E0 02 E1  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string callDemo_bin {
            get {
                return ResourceManager.GetString("callDemo_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  HARDWARE INTERRUPT 02.
        ///; -------------------------------------------------------------------------
        ///;  Use  CLI  and  STI  to clear and set the interrupt flag.
        ///; -------------------------------------------------------------------------
        ///
        ///	JMP	Start
        ///	DB	40	; Interrupt vector at address 02.
        ///
        ///; -------------------------------------------------------------------------
        ///Start:
        ///	NOP
        ///	NOP
        ///	NOP
        ///	CLI
        ///	NOP
        ///	NOP
        ///	NOP
        ///	STI
        ///	J [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cliSti {
            get {
                return ResourceManager.GetString("cliSti", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 03 40 FF FF FF FD FF 
        ///FF FF FC C0 F8 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///FF FF FF FF FF CD 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cliSti_bin {
            get {
                return ResourceManager.GetString("cliSti_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  MAKING COMPARISONS USING  CMP.
        ///; -------------------------------------------------------------------------
        ///
        ///; -------------------------------------------------------------------------
        ///;  Compare registers.
        ///;  Stop repeating when registers are equal.
        ///; -------------------------------------------------------------------------
        ///Start:
        ///	MOV	CL,00	; Initialise counter.
        ///	MOV	DL,10	; Initialise test value.
        ///Rept1:
        ///	INC	CL	; In [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string compare {
            get {
                return ResourceManager.GetString("compare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 02 00 D0 03 10 A4 02 
        ///DA 02 03 C2 FB D0 02 20 
        ///D0 03 10 A5 02 DA 02 03 
        ///C4 FB D0 03 00 A4 03 DB 
        ///03 10 C2 FB D0 03 20 A5 
        ///03 DB 03 10 C4 FB D0 03 
        ///00 D0 00 10 D2 50 00 A4 
        ///03 DC 03 50 C2 FB D0 03 
        ///20 D0 00 10 D2 50 00 A5 
        ///03 DC 03 50 C4 FB C0 B2 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string compare_bin {
            get {
                return ResourceManager.GetString("compare_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; HIGH LEVEL CODE
        ///;
        ///; Calculate r : = m % n
        ///; Parameter m is to be stored in address FF
        ///; Parameter n is to be stored in address FE
        ///; The result is stored in address FD
        ///; This demonstration shows parameter passing etc as a compiler would translate
        ///; the following high level language (except user input, output):
        ///;   program mod
        ///;   global
        ///;     proc modulo(in copy m:int,in copy n:int,out ref r:int)
        ///;     do
        ///;       r init := m;
        ///;       while r &gt;= n do
        ///;         r := r - n;
        ///;       endwhile
        ///;  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string compilerExample {
            get {
                return ResourceManager.GetString("compilerExample", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 01 FF D0 00 F0 D5 04 
        ///00 D0 00 FF D3 00 00 E0 
        ///00 D0 00 FE D3 00 00 E0 
        ///00 D0 00 FD E0 00 D5 00 
        ///04 E0 01 D5 01 00 CA 30 
        ///00 00 00 00 00 00 00 00 
        ///D5 00 01 B0 00 03 D3 00 
        ///00 E0 00 D5 00 01 B0 00 
        ///01 D3 00 00 E0 00 E1 00 
        ///E1 02 D4 00 02 D5 00 01 
        ///B0 00 01 D3 00 00 E0 00 
        ///E1 00 D3 00 00 E0 00 D5 
        ///00 01 B0 00 02 D3 00 00 
        ///E0 00 E1 02 E1 00 DA 00 
        ///02 C3 3C D5 00 01 B0 00 
        ///01 D3 00 00 E0 00 E1 00 
        ///D3 00 00 E0 00 D5 00 01 
        ///B0 00 02 D3 00 00 E0 00 
        ///E1 02 E1 00 A1 00 02 E0 
        ///00 D5 00 01 B0 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string compilerExample_bin {
            get {
                return ResourceManager.GetString("compilerExample_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  DEMO
        ///; -------------------------------------------------------------------------
        ///;  A demonstration program that exercises many instructions
        ///;  and most of the peripherals available in the simulator.
        ///;  CALL, RET, INT and IRET are not used because these
        ///;  commands are not available in the shareware version.
        ///; -------------------------------------------------------------------------
        ///
        ///; ----------------------------------- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string demo {
            get {
                return ResourceManager.GetString("demo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 0F 48 45 4C 4C 4F 20 
        ///57 4F 52 4C 44 21 00 D0 
        ///02 C0 D0 01 03 D3 00 01 
        ///DB 00 00 C1 0B D4 02 00 
        ///A4 02 A4 01 C0 F1 D0 01 
        ///0C D0 00 AA F1 01 AD 00 
        ///A5 01 C2 FA C0 04 C0 D9 
        ///D0 01 0C D0 00 FF F1 02 
        ///D0 00 FE F1 02 D0 00 01 
        ///F1 02 D0 00 00 F1 02 A5 
        ///01 C2 EA F0 03 DB 00 01 
        ///C1 09 D0 00 80 F1 03 C0 
        ///07 D0 00 00 F1 03 D0 01 
        ///20 A5 01 C2 FE D0 00 FF 
        ///F1 04 D0 01 0A D0 00 4F 
        ///F1 04 A5 01 C2 FC D0 01 
        ///20 D0 00 11 F1 05 9A 00 
        ///A5 01 C2 FA D0 02 C0 D0 
        ///01 0C D0 00 20 D4 02 00 
        ///A4 02 A5 01 C2 F9  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string demo_bin {
            get {
                return ResourceManager.GetString("demo_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///; WORK OUT 2 PLUS 2.
        ///; -------------------------------------------------------------------------
        ///
        ///;	CLO		; Close unwanted windows.
        ///
        ///	MOV	AL,02	; Copy a 2 into the AL register.
        ///	MOV	BL,02	; Copy a 2 into the BL register.
        ///	ADD	AL,BL	; Add AL to BL. Answer goes into AL.
        ///
        ///	END		; Program ends.
        ///	
        ///; -------------------------------------------------------------------------
        ///;
        ///; YOUR TASKS
        ///;
        ///; 1)  Write a program that subtrac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string first {
            get {
                return ResourceManager.GetString("first", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 02 D0 01 02 A0 00 
        ///01 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string first_bin {
            get {
                return ResourceManager.GetString("first_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  A PROGRAM TO TURN THE HEATER ON AND OFF.
        ///; -------------------------------------------------------------------------
        ///;  The system starts with the heater off allowing it to cool.
        ///;  The heater is then turned on until about 22 degrees is reached.
        ///;  This temperature is maintained for a period.
        ///;  The temperature is then forced up for a period before being
        ///;  returned to 22 degrees.
        ///;  The above is then repeated.
        ///; ------- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string heatCool {
            get {
                return ResourceManager.GetString("heatCool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 01 80 E0 01 E1 00 BC 
        ///00 80 E0 00 F1 03 D0 00 
        ///30 CA 90 D0 02 20 A5 02 
        ///C1 ED F0 03 DB 00 80 C1 
        ///13 DB 00 81 C1 07 DB 00 
        ///00 C1 09 D0 00 00 F1 03 
        ///C0 E6 D0 00 80 F1 03 C0 
        ///DF 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///E0 00 A5 00 C2 FE E1 00 
        ///CB 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string heatCool_bin {
            get {
                return ResourceManager.GetString("heatCool_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JMP Start
        ///
        ///DB 40
        ///
        ///Start:
        ///STI
        ///ADD AL,02
        ///ADD BL,03
        ///ADD CL,04
        ///ADD DL,05
        ///
        ///HALT
        ///
        ///ORG 40
        ///MOV AL,FF
        ///MOV BL,FF
        ///MOV CL,FF
        ///MOV DL,FF
        ///IRET
        ///
        ///END
        ///.
        /// </summary>
        internal static string hw_int {
            get {
                return ResourceManager.GetString("hw_int", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 03 50 FC D0 00 11 F1 
        ///05 9B 00 C0 FC C0 F6 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///84 C8 30 58 00 00 00 00 
        ///40 00 00 00 00 00 00 00 
        ///E0 00 E0 01 EA D1 01 48 
        ///D3 00 01 F1 01 DB 00 58 
        ///C1 09 A4 01 D2 48 01 C0 
        ///08 D0 01 40 D2 48 01 EB 
        ///E1 01 E1 00 CD 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string hw_int_bin {
            get {
                return ResourceManager.GetString("hw_int_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 03 40 FC B0 00 02 B0 
        ///01 03 B0 02 04 B0 03 05 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///D0 00 FF D0 01 FF D0 02 
        ///FF D0 03 FF CD 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string hw_int_bin1 {
            get {
                return ResourceManager.GetString("hw_int_bin1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  USING HARDWARE INTERRUPTS.
        ///;  This program spins the stepper motor continuously and steps
        ///;  the traffic lights on each hardware interrupt.
        ///;  Uncheck the &quot;Show only one peripheral at a time&quot; box to
        ///;  enable both displays to appear simultaneously.
        ///; -------------------------------------------------------------------------
        ///	JMP	Start	; Jump past table of interrupt vectors.
        ///
        ///	ORG	02	; Hardware interrupt vector
        ///	DB	50	; V [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string hwInt {
            get {
                return ResourceManager.GetString("hwInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  COUNTING.
        ///; -------------------------------------------------------------------------
        ///
        ///	MOV	BL,40	; Initial value stored in BL.
        ///
        ///Rep:			; Jump back to this label.
        ///	INC	BL	; Add one to BL.
        ///	JMP	Rep	; Jump back to Rep.
        ///
        ///	END		; Program ends.
        ///
        ///; -------------------------------------------------------------------------
        ///;
        ///; YOUR TASKS
        ///;
        ///; 7) Rewrite the program to count backwards using DEC BL.
        ///;
        ///; 8) Rewrite the prog [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string incJmp {
            get {
                return ResourceManager.GetString("incJmp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 01 40 A4 01 C0 FE 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string incJmp_bin {
            get {
                return ResourceManager.GetString("incJmp_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  TEST INSTRUCTIONS IN THE INSTRUCTION SET.
        ///; -------------------------------------------------------------------------
        ///
        ///; -------------------------------------------------------------------------
        ///	ORG	A0
        ///	DB	&quot;HELLO&quot;
        ///	DB	00
        ///
        ///; -------------------------------------------------------------------------
        ///	ORG	48
        ///	DB	&quot;world&quot;
        ///	DB	00
        ///
        ///; -------------------------------------------------------------------------
        ///	ORG	00
        ///	MOV	C [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string instructions {
            get {
                return ResourceManager.GetString("instructions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 02 A0 D0 01 C0 D3 00 
        ///02 DB 00 00 C1 0B D4 01 
        ///00 A4 01 A4 02 C0 F1 D1 
        ///02 A0 D0 01 C6 D3 00 02 
        ///DC 00 A5 C1 0B D4 01 00 
        ///A4 01 A4 02 C0 F1 D0 00 
        ///5A D2 C0 00 D0 03 78 D0 
        ///00 8F CA 62 B0 03 01 DA 
        ///03 00 C2 F8 C0 0A 00 00 
        ///57 4F 52 4C 44 00 D0 01 
        ///10 D0 00 88 F1 05 9B 00 
        ///B1 01 01 DB 01 F0 C2 F6 
        ///C0 0E E0 00 E0 03 E1 00 
        ///F1 01 E1 00 FF CB CC 06 
        ///F0 00 D0 02 F0 D0 03 FF 
        ///AA 02 03 AB 02 03 AC 00 
        ///01 AD 01 9A 00 9C 02 9D 
        ///03 BA 00 0F BB 02 F0 BC 
        ///00 AA 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string instructions_bin {
            get {
                return ResourceManager.GetString("instructions_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JMP Start
        ///
        ///DB 40
        ///DB 50
        ///DB 60
        ///
        ///Start:
        ///ADD AL,02
        ///INT 02
        ///ADD AL,02
        ///INT 03
        ///HALT
        ///
        ///
        ///ORG 40
        ///ADD BL,03
        ///IRET
        ///
        ///ORG 50
        ///ADD CL,04
        ///INT 04
        ///ADD CL,04
        ///INT 04
        ///IRET
        ///
        ///ORG 60
        ///ADD DL,05
        ///IRET
        ///
        ///
        ///
        ///END
        ///.
        /// </summary>
        internal static string int_test {
            get {
                return ResourceManager.GetString("int_test", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 05 40 50 60 B0 00 02 
        ///CC 02 B0 00 02 CC 03 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///B0 01 03 CD 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///B0 02 04 CC 04 B0 02 04 
        ///CC 04 CD 00 00 00 00 00 
        ///B0 03 05 CD 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string int_test_bin {
            get {
                return ResourceManager.GetString("int_test_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  INTERRUPT TESTS.
        ///; -------------------------------------------------------------------------
        ///;  This was used to check that interrupts worked properly
        ///;  and would co-exist with a procedure. It does nothing
        ///;  interesting.
        ///; -------------------------------------------------------------------------
        ///
        ///	JMP	Start
        ///
        ///	DB	30
        ///	DB	50
        ///	DB	D0
        ///
        ///Start:
        ///	INT	02
        ///	INT	03
        ///	INT	04
        ///
        ///	JMP	Start
        ///
        ///	ORG	30
        ///	NOP
        ///	NOP
        ///	NOP
        ///	NOP
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ints {
            get {
                return ResourceManager.GetString("ints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 05 30 50 D0 CC 02 CC 
        ///03 CC 04 C0 FA 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///FF FF FF FF FF CD 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///FF FF FF FF FF CD 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ints_bin {
            get {
                return ResourceManager.GetString("ints_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fish:
        ///INC AL
        ///INC BL
        ///INC CL
        ///INC DL
        ///JMP Fish
        ///
        ///END
        ///.
        /// </summary>
        internal static string ivo_tests {
            get {
                return ResourceManager.GetString("ivo_tests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A4 00 A4 01 A4 02 A4 03 
        ///C0 F8 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ivo_tests_bin {
            get {
                return ResourceManager.GetString("ivo_tests_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fish:
        ///INC AL
        ///INC BL
        ///INC CL
        ///INC DL
        ///JMP Fish
        ///
        ///END
        ///.
        /// </summary>
        internal static string ivo_tests1 {
            get {
                return ResourceManager.GetString("ivo_tests1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  TEST  JO  AND  JNO.
        ///; -------------------------------------------------------------------------
        ///;  An overflow occurs when a calculation gives a result
        ///;  that is too big to be stored in a register. This
        ///;  eight bit simulator can hold integer numbers between
        ///;  -128 and +127. Any number outside this range causes an
        ///;  overflow and the &apos;O&apos; flag is set in the status register (SR).
        ///;
        ///;  The JO and JNO commands work in conj [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string joJno {
            get {
                return ResourceManager.GetString("joJno", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 75 A4 00 C5 04 C0 
        ///FC D0 00 75 A4 00 C6 FE 
        ///C0 F0 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string joJno_bin {
            get {
                return ResourceManager.GetString("joJno_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  TEST  JS  AND  JNS.
        ///; -------------------------------------------------------------------------
        ///;  The &apos;S&apos; or sign flag in the status register (SR) is set
        ///;  whenever a calculation gives a negative result. The JS
        ///;  and JNS commands work in conjunction with the &apos;S&apos; flag.
        ///;  JS causes the program to jump if the &apos;S&apos; flag is set.
        ///;  JNS causes the program to jump if the &apos;S&apos; flag is not set.
        ///; -------------------------------- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jsJns {
            get {
                return ResourceManager.GetString("jsJns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 05 A5 00 C3 04 C0 
        ///FC D0 00 05 A5 00 C4 FE 
        ///C0 F0 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jsJns_bin {
            get {
                return ResourceManager.GetString("jsJns_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   JZ Fish
        ///  MOV DL,02
        ///DB &apos;h&apos;
        ///DB 55
        ///DB &quot;efg&quot;
        ///ORG 60
        ///  JMP Start
        ///Start:
        ///  MOV AL,0F
        ///  JMP Fish
        ///Fish:
        ///  MOV BL,01
        ///  JMP Start
        ///
        ///END
        ///
        ///; Anderer Test
        ///ORG 10
        ///JMP Gary
        ///MOV Al, EE
        ///
        ///ORG 20
        ///Gary:
        ///MOV BL,CC
        ///
        ///
        ///ORG 00
        ///JMP Gary
        ///MOV DL, AA
        ///
        ///ORG 1A
        ///JMP Gary
        ///
        ///ORG 24
        ///JMP Gary
        ///
        ///END
        ///
        ///.
        /// </summary>
        internal static string JumpTest {
            get {
                return ResourceManager.GetString("JumpTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C1 67 D0 03 02 48 55 45 
        ///46 47 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///C0 02 D0 00 0F C0 02 D0 
        ///01 01 C0 F8 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JumpTest_bin {
            get {
                return ResourceManager.GetString("JumpTest_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  TEST  JZ  AND  JNZ.
        ///; -------------------------------------------------------------------------
        ///;  The &apos;Z&apos; or zero flag in the status register (SR) is set
        ///;  whenever a calculation gives a zero result. The JZ
        ///;  and JNZ commands work in conjunction with the &apos;Z&apos; flag.
        ///;  JZ causes the program to jump if the &apos;Z&apos; flag is set.
        ///;  JNZ causes the program to jump if the &apos;Z&apos; flag is not set.
        ///; ------------------------------------ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jzJnz {
            get {
                return ResourceManager.GetString("jzJnz", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 05 A5 00 C1 04 C0 
        ///FC D0 00 05 A5 00 C2 FE 
        ///C0 F0 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jzJnz_bin {
            get {
                return ResourceManager.GetString("jzJnz_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  LIFT TEST.
        ///; -------------------------------------------------------------------------
        ///	MOV	AL,00
        ///	OUT	06
        ///Loop:
        ///	IN	06	; Test for lift at top.
        ///	PUSH	AL
        ///	POP	BL
        ///	AND	BL,05	; Test for MotorUp AND TopSwitch.
        ///	CMP	BL,05
        ///	JZ	StopTop
        ///
        ///	IN	06	; Test lift at bottom.
        ///	PUSH	AL
        ///	POP	BL
        ///	AND	BL,0A	; Test for MotorDown AND BottomSwitch.
        ///	CMP	BL,0A
        ///	JZ	StopBot
        ///
        ///	PUSH	AL
        ///	POP	BL
        ///	AND	BL,10	; test for the Call Down button.        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string lift {
            get {
                return ResourceManager.GetString("lift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 00 F1 06 F0 06 E0 
        ///00 E1 01 BA 01 05 DB 01 
        ///05 C1 24 F0 06 E0 00 E1 
        ///01 BA 01 0A DB 01 0A C1 
        ///1D E0 00 E1 01 BA 01 10 
        ///C2 1B E0 00 E1 01 BA 01 
        ///20 C2 2A C0 D2 BA 00 DE 
        ///F1 06 C0 CB BA 00 ED F1 
        ///06 C0 C4 F0 06 BA 00 08 
        ///DB 00 08 C1 09 D0 00 12 
        ///F1 06 C0 B3 D0 00 00 F1 
        ///06 C0 AC F0 06 BA 00 04 
        ///DB 00 04 C1 09 D0 00 21 
        ///F1 06 C0 9B D0 00 00 F1 
        ///06 C0 94 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string lift_bin {
            get {
                return ResourceManager.GetString("lift_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  LOGIC
        ///; -------------------------------------------------------------------------
        ///
        ///; -------------------------------------------------------------------------
        ///;  DIRECT     is where logic is done with registers only.
        ///;  IMMEDIATE  is where logic is done with a register and a numeric
        ///;             value.
        ///; -------------------------------------------------------------------------
        ///;	CLO		; Close unwanted windows
        ///Start:
        ///
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string logic {
            get {
                return ResourceManager.GetString("logic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 FF D0 01 55 AA 00 
        ///01 B0 00 0F D0 00 0F D0 
        ///01 55 AB 00 01 BB 00 F0 
        ///D0 00 55 D0 01 FF AC 00 
        ///01 AC 00 01 AC 00 01 AC 
        ///00 01 BC 00 0F BC 00 0F 
        ///BC 00 0F BC 00 0F D0 00 
        ///AA AD 00 AD 00 AD 00 AD 
        ///00 C0 BF 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string logic_bin {
            get {
                return ResourceManager.GetString("logic_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  MAZE DEMO.
        ///; -------------------------------------------------------------------------
        ///
        ///Start:
        ///	MOV	AL,FF
        ///	OUT	04
        ///	MOV	CL,30
        ///	MOV	DL,40
        ///More:
        ///	MOV	AL,[CL]
        ///	MOV	BL,[DL]
        ///	CMP	AL,00
        ///	JZ	Start
        ///Rep:
        ///	OUT	04
        ///	DEC	BL
        ///	JNZ	Rep
        ///	INC	CL
        ///	INC	DL
        ///	JMP	More
        ///
        ///
        ///	ORG	30	; DATA TABLE TO RUN MAZE: Steering
        ///	DB	4F	; Down 0B
        ///	DB	1D	; Right 3
        ///	DB	8B	; Up 8
        ///	DB	1D	; Right 3
        ///	DB	4E	; Down 6
        ///	DB	1E	; Right 3
        ///	DB	8E	; Up 9
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string maze {
            get {
                return ResourceManager.GetString("maze", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 FF F1 04 D0 02 30 
        ///D0 03 40 D3 00 02 D3 01 
        ///03 DB 00 00 C1 EC F1 04 
        ///A5 01 C2 FC A4 02 A4 03 
        ///C0 EB 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///4F 1D 8B 1D 4E 1E 8E 2F 
        ///8C 1F 4E 00 00 00 00 00 
        ///0B 03 08 03 06 03 09 05 
        ///03 08 0C 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string maze_bin {
            get {
                return ResourceManager.GetString("maze_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; Meine Testprogramme
        ///; -------------------
        ///
        ///ROL BL ; Ein ROL Test
        ///
        ///; blbla
        ///
        ///
        ///RET
        ///
        ///STI ; ohne Parameter
        ///
        ///; 1 Parameter
        ///INC AL ; AL erhöhen
        ///IN 05
        ///
        ///ADD BL,AL
        ///ADD BL , AL ;Parameter mit Leezeichen
        ///
        ///ADD CL,65
        ///ADD DL,D4 ; Hex Wert
        ///
        ///MUL AL, 4D
        ///
        ///XOR SP,AD
        ///
        ///MOV CL,3E
        ///MOV CL,F    ; einstellige Konstante
        ///MOV AL,[05]
        ///MOV [D],BL    ;einstellige Konstante
        ///MOV [D4],DL
        ///MOV CL,[AL]  ; opCode D3
        ///MOV [BL],AL
        ///MOV AL,BL
        ///
        ///
        ///HALT
        ///
        ///
        ///ORG 80
        ///DB &apos;H&apos;
        ///DB &quot;sdf&quot;
        ///DB 33
        ///
        ///END
        ///.
        /// </summary>
        internal static string MeineTests {
            get {
                return ResourceManager.GetString("MeineTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 9A 01 CB FC A4 00 F0 05 
        ///A0 01 00 A0 01 00 B0 02 
        ///65 B0 03 D4 B2 00 4D BC 
        ///04 AD D0 02 3E D0 02 0F 
        ///D1 00 05 D2 0D 01 D2 D4 
        ///03 D3 02 00 D4 01 00 D5 
        ///00 01 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///48 53 44 46 33 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MeineTests_bin {
            get {
                return ResourceManager.GetString("MeineTests_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start:
        ///        MOV AL, BL
        ///    MOV [D4],DL
        ///MOV CL , 3E
        ///MOV DL ,FE
        ///IN 05
        ///INC AL ;test
        ///Fisch:
        ///ROL BL;commentttt
        ///JMP Start
        ///        HALT
        ///END;test
        ///;test comment
        ///;sldfjsldkf
        ///
        ///ORG 20
        ///DB &quot;test&quot;
        ///DB &apos;c&apos;
        ///DB 5E
        ///
        ///;sldkfjslkdf.
        /// </summary>
        internal static string MeinSyntaxHighlightingText {
            get {
                return ResourceManager.GetString("MeinSyntaxHighlightingText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D5 00 01 D2 D4 03 D0 02 
        ///3E D0 03 FE F0 05 A4 00 
        ///9A 01 C0 EE 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MeinSyntaxHighlightingText_bin {
            get {
                return ResourceManager.GetString("MeinSyntaxHighlightingText_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MOV AL,03
        ///MOV BL,AL
        ///MOV CL,[AL]
        ///MOV DL,[06]
        ///MOV [BL],BL
        ///MOV [15],BL
        ///
        ///END
        ///.
        /// </summary>
        internal static string mov_test {
            get {
                return ResourceManager.GetString("mov_test", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 03 D5 01 00 D3 02 
        ///00 D1 03 06 D4 01 01 D2 
        ///15 01 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string mov_test_bin {
            get {
                return ResourceManager.GetString("mov_test_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  A PROGRAM TO DEMONSTRATE MOV COMMANDS. MOV IS SHORT FOR MOVE.
        ///; -------------------------------------------------------------------------
        ///
        ///;	CLO		; Close unwanted windows.
        ///
        ///;	IMMEDIATE MOVES
        ///	MOV	AL,15	; Copy 15 HEX into the AL register.
        ///	MOV	BL,40	; Copy 40 HEX into the BL register.
        ///	MOV	CL,50	; Copy 50 HEX into the CL register.
        ///	MOV	DL,60	; Copy 60 HEX into the DL register.
        ///Foo:
        ///	INC	AL	; Increment AL for no particu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string move {
            get {
                return ResourceManager.GetString("move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 15 D0 01 40 D0 02 
        ///50 D0 03 60 A4 00 D2 A0 
        ///00 D1 01 40 D4 02 00 D3 
        ///01 02 C0 F2 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string move_bin {
            get {
                return ResourceManager.GetString("move_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  A PROGRAM TO DEMONSTRATE  MOV  COMMANDS.
        ///; -------------------------------------------------------------------------
        ///
        ///; -------------------------------------------------------------------------
        ///;  Register to register moves:
        ///;  These are NOT supported by this simulator
        ///;  MOV     AL,BL   This is commented out! It wouldn&apos;t work.
        ///;  To do this use PUSH BL followed by POP AL.
        ///; ---------------------------------------------- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string moves {
            get {
                return ResourceManager.GetString("moves", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 15 D0 01 40 D0 02 
        ///50 D0 03 60 A4 00 D2 A0 
        ///00 D1 01 40 D4 02 00 D3 
        ///01 02 C0 F2 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string moves_bin {
            get {
                return ResourceManager.GetString("moves_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; Multiply
        ///
        ///; plus * plus, no overflow
        ///	MOV	AL,35
        /// 	MOV	BL,02
        ///	MUL	AL,BL	; AL = 6A
        ///; plus * plus, overflow
        ///	MOV	CL,15
        /// 	MOV	DL,22
        ///	MUL	CL,DL	; CL = CA
        ///
        ///
        ///; plus * minus, no overflow
        ///	MOV	AL,19 
        /// 	MOV	BL,FC 
        ///	MUL	AL,BL	; AL = 9C
        ///; plus * minus, overflow
        ///	MOV	CL,55 
        /// 	MOV	DL,FD 
        ///	MUL	CL,DL	; CL = 01
        ///
        ///
        ///; minus * plus, no overflow
        ///	MOV	AL,F7
        /// 	MOV	BL,09
        ///	MUL	AL,BL	; AL = AF
        ///; minus * plus, overflow
        ///	MOV	CL,E5
        /// 	MOV	DL,22
        ///	MUL	CL,DL	; CL = 6A
        ///
        ///
        ///; minus * minus, no overflow
        ///	MOV	AL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string multiply {
            get {
                return ResourceManager.GetString("multiply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 35 D0 01 02 A2 00 
        ///01 D0 02 15 D0 03 22 A2 
        ///02 03 D0 00 19 D0 01 FC 
        ///A2 00 01 D0 02 55 D0 03 
        ///FD A2 02 03 D0 00 F7 D0 
        ///01 09 A2 00 01 D0 02 E5 
        ///D0 03 22 A2 02 03 D0 00 
        ///FD D0 01 F7 A2 00 01 D0 
        ///02 ED D0 03 F3 A2 02 03 
        ///D0 00 00 D0 01 00 A2 00 
        ///01 D0 00 00 D0 01 1B A2 
        ///00 01 D0 00 00 D0 01 F7 
        ///A2 00 01 D0 00 1C D0 01 
        ///00 A2 00 01 D0 00 DA D0 
        ///01 00 A2 00 01 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string multiply_bin {
            get {
                return ResourceManager.GetString("multiply_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; Multiply
        ///
        ///; plus * plus, no overflow
        ///	MOV	AL,35
        /// 	MOV	BL,02
        ///	MUL	AL,BL	; AL = 6A
        ///; plus * plus, overflow
        ///	MOV	CL,15
        /// 	MOV	DL,22
        ///	MUL	CL,DL	; CL = CA
        ///
        ///
        ///; plus * minus, no overflow
        ///	MOV	AL,19 
        /// 	MOV	BL,FC 
        ///	MUL	AL,BL	; AL = 9C
        ///; plus * minus, overflow
        ///	MOV	CL,55 
        /// 	MOV	DL,FD 
        ///	MUL	CL,DL	; CL = 01
        ///
        ///
        ///; minus * plus, no overflow
        ///	MOV	AL,F7
        /// 	MOV	BL,09
        ///	MUL	AL,BL	; AL = AF
        ///; minus * plus, overflow
        ///	MOV	CL,E5
        /// 	MOV	DL,22
        ///	MUL	CL,DL	; CL = 6A
        ///
        ///
        ///; minus * minus, no overflow
        ///	MOV	AL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string multiply1 {
            get {
                return ResourceManager.GetString("multiply1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; ----------------------------------------------------------------------------
        ///;  TIME SLICE MULTITASKER PROGRAM.
        ///; ----------------------------------------------------------------------------
        ///;  This program spins the stepper motor continuously in one task.
        ///;  The traffic lights are controlled in a second task.
        ///;  Task three repeatedly writes to the visual display unit VDU.
        ///;  Task switching is enforced by the multitasker program on abround robin
        ///;  basis.
        ///;  The task running is in active state, al [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string multitasker {
            get {
                return ResourceManager.GetString("multitasker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 03 06 FC C0 72 FD EA 
        ///E0 00 E0 01 E0 02 E0 03 
        ///D1 03 60 D3 03 03 D0 02 
        ///06 E1 00 D4 03 00 A4 03 
        ///A5 02 C2 F7 D1 00 60 A4 
        ///00 D3 03 00 DB 03 00 C2 
        ///08 D0 00 61 D1 03 61 D2 
        ///60 00 B0 03 05 D0 02 06 
        ///D3 00 03 E0 00 A5 03 A5 
        ///02 C2 F7 E1 03 E1 02 E1 
        ///01 E1 00 EB FC CD 00 00 
        ///00 00 00 00 00 00 00 00 
        ///61 70 80 D0 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 76 D0 00 
        ///33 F1 05 9B 00 C0 FC 00 
        ///00 00 00 00 00 86 D1 01 
        ///A7 D3 00 01 F1 01 DB 00 
        ///58 C1 09 A4 01 D2 A7 01 
        ///C0 EE D0 01 A8 D2  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string multitasker_bin {
            get {
                return ResourceManager.GetString("multitasker_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; ----------------------------------------------------------------------------
        ///;  TIME SLICE MULTITASKER PROGRAM.
        ///; ----------------------------------------------------------------------------
        ///;  This program spins the stepper motor continuously in one task.
        ///;  The traffic lights are controlled in a second task.
        ///;  Task three repeatedly writes to the visual display unit VDU.
        ///;  Task switching is enforced by the multitasker program on abround robin
        ///;  basis.
        ///;  The task running is in active state, al [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string multitasker2 {
            get {
                return ResourceManager.GetString("multitasker2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 03 06 FC C0 72 FD EA 
        ///E0 00 E0 01 E0 02 E0 03 
        ///D1 03 60 D3 03 03 D0 02 
        ///06 E1 00 D4 03 00 A4 03 
        ///A5 02 C2 F7 D1 00 60 A4 
        ///00 D3 03 00 DB 03 00 C2 
        ///08 D0 00 61 D1 03 61 D2 
        ///60 00 B0 03 05 D0 02 06 
        ///D3 00 03 E0 00 A5 03 A5 
        ///02 C2 F7 E1 03 E1 02 E1 
        ///01 E1 00 EB FC CD 00 00 
        ///00 00 00 00 00 00 00 00 
        ///61 70 80 C0 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 76 D0 00 
        ///33 F1 05 9B 00 C0 FC 00 
        ///00 00 00 00 00 86 D1 01 
        ///A7 D3 00 01 F1 01 DB 00 
        ///58 C1 09 A4 01 D2 A7 01 
        ///C0 EE D0 01 A8 D2  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string multitasker2_bin {
            get {
                return ResourceManager.GetString("multitasker2_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  PASSING PARAMETERS.
        ///; -------------------------------------------------------------------------
        ///
        ///; Use Registers to pass parameters into a procedure
        ///
        ///	JMP 	Start	; Skip over bytes used for data storage.
        ///
        ///	DB	00	; Reserve a byte of RAM at address 02.
        ///	DB	00	; Reserve a byte of RAM at address 03.
        ///
        ///; -------------------------------------------------------------------------
        ///Start:
        ///	MOV	AL,05
        ///	MOV	BL,04
        ///	CALL	30	; A pro [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string param {
            get {
                return ResourceManager.GetString("param", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 04 00 00 D0 00 05 D0 
        ///01 04 CA 30 D0 00 03 D2 
        ///02 00 D0 01 01 D2 03 01 
        ///CA 40 D0 00 07 E0 00 D0 
        ///01 02 E0 01 CA 60 E1 01 
        ///E1 00 C0 DA 00 00 00 00 
        ///A0 00 01 CB 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///E0 02 E0 03 EA D1 02 02 
        ///D1 03 03 A0 02 03 D2 02 
        ///02 EB E1 03 E1 02 CB 00 
        ///00 00 00 00 00 00 00 00 
        ///E1 03 E1 01 E1 00 A0 00 
        ///01 E0 00 E0 00 E0 03 CB 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string param_bin {
            get {
                return ResourceManager.GetString("param_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MOV BL,03
        ///PUSH BL
        ///POP BL
        ///
        ///END
        ///.
        /// </summary>
        internal static string pop_push_test {
            get {
                return ResourceManager.GetString("pop_push_test", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 01 03 E0 01 E1 01 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string pop_push_test_bin {
            get {
                return ResourceManager.GetString("pop_push_test_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  A GENERAL PURPOSE TIME DELAY PROCEDURE.
        ///; -------------------------------------------------------------------------
        ///;  The delay is controlled by the value in AL.
        ///;  When the procedure terminates, the CPU registers are restored
        ///;  to the same values that were present before the procedure was
        ///;  called. PUSH, POP, PUSHF and POPF are used to achieve this.
        ///;  In this example one procedure is re-used three times. This
        ///;  re-u [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string proc {
            get {
                return ResourceManager.GetString("proc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 08 CA 30 D0 00 10 
        ///CA 30 D0 00 20 CA 30 C0 
        ///F1 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///E0 00 EA A5 00 C2 FE EB 
        ///E1 00 CB 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string proc_bin {
            get {
                return ResourceManager.GetString("proc_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MOV AL, 20 ;MOV Befehl ist immer gut
        ///PUSH AL
        ///;testing blabla
        ///STI
        ///
        ///OUT 01
        ///DEC AL
        ///OUT 01 ; let the lights shine
        ///INC AL
        ///OUT 01
        ///MOV AL,20
        ///ADD AL,7F
        ///
        ///PUSH AL
        ///POPF
        ///
        ///MOV AL,AA
        ///MOV BL,BB
        ///MOV CL,CC
        ///MOV DL,DD
        ///
        ///
        ///
        ///PUSH AL
        ///PUSH BL
        ///PUSH CL
        ///PUSH DL
        ///PUSH AL
        ///PUSH BL
        ///PUSH CL
        ///PUSH DL
        ///PUSH AL
        ///PUSH BL
        ///PUSH CL
        ///PUSH DL
        ///PUSH AL
        ///PUSH BL
        ///PUSH CL
        ///PUSH DL
        ///PUSH AL
        ///PUSH BL
        ///PUSH CL
        ///PUSH DL
        ///
        ///POP AL
        ///POP BL
        ///POP CL
        ///POP DL
        ///POP AL
        ///POP BL
        ///POP CL
        ///POP DL
        ///
        ///END.
        /// </summary>
        internal static string PUSH_POP {
            get {
                return ResourceManager.GetString("PUSH_POP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 20 E0 00 FC F1 01 
        ///A5 00 F1 01 A4 00 F1 01 
        ///D0 00 20 B0 00 7F E0 00 
        ///EB D0 00 AA D0 01 BB D0 
        ///02 CC D0 03 DD E0 00 E0 
        ///01 E0 02 E0 03 E0 00 E0 
        ///01 E0 02 E0 03 E0 00 E0 
        ///01 E0 02 E0 03 E0 00 E0 
        ///01 E0 02 E0 03 E0 00 E0 
        ///01 E0 02 E0 03 E1 00 E1 
        ///01 E1 02 E1 03 E1 00 E1 
        ///01 E1 02 E1 03 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PUSH_POP_bin {
            get {
                return ResourceManager.GetString("PUSH_POP_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  A PROGRAM TO EXERCISE THE SEVEN SEGMENT DISPLAYS.
        ///; -------------------------------------------------------------------------
        ///;  It is up to you to modify this program to get the displays 
        ///;  to step through recognisable sequences. Try counting or 
        ///;  programming the segments to spell H E L L O.
        ///;  Use a data table. It is poor practice to mix code and data
        ///;  as happens in this example.
        ///; --------------------------------- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sevSeg {
            get {
                return ResourceManager.GetString("sevSeg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 FF F1 02 D0 00 01 
        ///F1 02 D0 00 FE F1 02 D0 
        ///00 00 F1 02 C0 EC 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sevSeg_bin {
            get {
                return ResourceManager.GetString("sevSeg_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  HARDWARE INTERRUPT
        ///; -------------------------------------------------------------------------
        ///;  Here is a solution to an exercise for a more advanced student.
        ///;
        ///;  This program increments the digits in the seven segment
        ///;  display. The left hand digit counts from 0 to 9 repeatedly
        ///;  at a rate determined by the CPU clock speed.
        ///;
        ///;  The right hand digit increments from 0 to 9 repeatedly at
        ///;  a rate determined by the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ssegHw {
            get {
                return ResourceManager.GetString("ssegHw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 0E 30 FA 0A B6 9E 4E 
        ///DC FC 8A FE CE 03 FC D0 
        ///01 03 D3 00 01 F1 02 DB 
        ///00 CE C1 F4 A4 01 C0 F4 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///E0 00 E0 01 EA D1 01 0D 
        ///D3 00 01 BB 00 01 F1 02 
        ///DB 00 CF C1 09 A4 01 D2 
        ///0D 01 C0 08 D0 01 03 D2 
        ///0D 01 EB E1 01 E1 00 CD 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ssegHw_bin {
            get {
                return ResourceManager.GetString("ssegHw_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  TEST PUSH, POP, PUSHF and POPF
        ///; -------------------------------------------------------------------------
        ///;  This program fails in an unpredictable way.
        ///;  The POPF command sets the CPU flags in an unplanned way.
        ///;  The I flag is soon set, which causes the hardware interrupt
        ///;  02 to start working. The address in RAM location 02 is zero.
        ///;  This causes the program to restart without clearing up the
        ///;  stack. The program  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string stackCrash {
            get {
                return ResourceManager.GetString("stackCrash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 10 E0 00 E0 00 E1 
        ///01 EA A5 00 C2 F7 D0 00 
        ///10 E1 02 EB A5 00 C2 FB 
        ///C0 E8 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string stackCrash_bin {
            get {
                return ResourceManager.GetString("stackCrash_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  STEPPER MOTOR MOVING IN HALF STEPS.
        ///; -------------------------------------------------------------------------
        ///;  It would be better to use a data table. It is not a
        ///;  good idea to mix code and data.
        ///; -------------------------------------------------------------------------
        ///
        ///Start:
        ///	MOV	AL,01
        ///	OUT	05
        ///	MOV	AL,03
        ///	OUT	05
        ///	MOV	AL,02
        ///	OUT	05
        ///	MOV	AL,06
        ///	OUT	05
        ///	MOV	AL,04
        ///	OUT	05
        ///	MOV	AL,0c
        ///	OUT	05
        ///	MOV	AL,08
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string stepper {
            get {
                return ResourceManager.GetString("stepper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 01 F1 05 D0 00 03 
        ///F1 05 D0 00 02 F1 05 D0 
        ///00 06 F1 05 D0 00 04 F1 
        ///05 D0 00 0C F1 05 D0 00 
        ///08 F1 05 D0 00 09 F1 05 
        ///C0 D8 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string stepper_bin {
            get {
                return ResourceManager.GetString("stepper_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MOV AL,00
        ///OUT 0
        ///MOV AL,01
        ///OUT 0
        ///MOV AL,02
        ///OUT 0
        ///MOV AL,04
        ///OUT 0
        ///MOV AL,08
        ///OUT 0
        ///MOV AL,10
        ///OUT 0
        ///MOV AL,20
        ///OUT 0
        ///MOV AL,40
        ///OUT 0
        ///MOV AL,80
        ///OUT 0
        ///
        ///END
        ///.
        /// </summary>
        internal static string sti_etst {
            get {
                return ResourceManager.GetString("sti_etst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 00 F1 00 D0 00 01 
        ///F1 00 D0 00 02 F1 00 D0 
        ///00 04 F1 00 D0 00 08 F1 
        ///00 D0 00 10 F1 00 D0 00 
        ///20 F1 00 D0 00 40 F1 00 
        ///D0 00 80 F1 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sti_etst_bin {
            get {
                return ResourceManager.GetString("sti_etst_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  SWAP NIBBLES IN A BYTE.
        ///; -------------------------------------------------------------------------
        ///;  Entry  BL = byte_with_nibbles_to_be_swapped
        ///;  Exit   BL = byte_with_swapped_nibbles
        ///; -------------------------------------------------------------------------
        ///
        ///	ORG	00
        ///
        ///	MOV	BL,59
        ///	CALL	20
        ///	HALT
        ///
        ///; -------------------------------------------------------------------------
        ///	ORG	20
        ///
        ///	PUSH    AL
        ///	PUSH	DL
        ///	PUSHF
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string swapNnibbles {
            get {
                return ResourceManager.GetString("swapNnibbles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 01 59 CA 20 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///E0 00 E0 03 EA D0 03 10 
        ///E0 01 E1 00 A2 00 03 A3 
        ///01 03 A0 01 00 EB E1 03 
        ///E1 00 CB 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string swapNnibbles_bin {
            get {
                return ResourceManager.GetString("swapNnibbles_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  AN EXAMPLE OF SOFTWARE INTERRUPTS.
        ///; -------------------------------------------------------------------------
        ///	JMP	Start	; Jump past table of interrupt vectors.
        ///
        ///	DB	51	; Vector at 02 pointing to address 51.
        ///	DB	71	; Vector at 03 pointing to address 71.
        ///
        ///; -------------------------------------------------------------------------
        ///Start:
        ///	INT	02	; Do interrupt 02.
        ///	INT	03	; Do interrupt 03.
        ///	JMP	Start
        ///
        ///; ------------ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string swInt {
            get {
                return ResourceManager.GetString("swInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C0 04 51 71 CC 02 CC 03 
        ///C0 FC 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///E0 D1 00 50 AD 00 D2 50 
        ///00 F1 01 CD 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 D1 00 70 AD 00 BA 00 
        ///FE D2 70 00 F1 02 CD 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string swInt_bin {
            get {
                return ResourceManager.GetString("swInt_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  CONTROL THE TRAFFIC LIGHTS.
        ///; -------------------------------------------------------------------------
        ///
        ///;	CLO		; Close unwanted windows.
        ///Start:
        ///			; Turn off all the traffic lights.
        ///	MOV	AL,FF	; Copy 0000&apos;0000bin into the AL register.
        ///	PUSH	AL	; Copy AL into Stack register.
        ///	POP	CL	; Copy CL From Stack
        ///	IN	00	; Input from Keyboard (ASCI-Wert)
        ///	IN	06	; Input from Lift
        ///
        ///			; Turn on all the traffic lights.
        ///	MOV	AL,80 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tests {
            get {
                return ResourceManager.GetString("tests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 FF E0 00 E1 02 F0 
        ///00 F0 06 D0 00 80 F1 03 
        ///C0 F0 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tests_bin {
            get {
                return ResourceManager.GetString("tests_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  CONTROL THE TRAFFIC LIGHTS.
        ///; -------------------------------------------------------------------------
        ///
        ///;	CLO		; Close unwanted windows.
        ///Start:
        ///			; Turn off all the traffic lights.
        ///	MOV	AL,00	; Copy 0000&apos;0000bin into the AL register.
        ///	OUT	01	; Send AL to Port One (the traffic lights).
        ///
        ///			; Turn on all the traffic lights.
        ///	MOV	AL,FF	; Copy 1111&apos;1100bin into the AL register.
        ///	OUT	01	; Send AL to Port One (the traffic [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tLight {
            get {
                return ResourceManager.GetString("tLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 00 F1 01 D0 00 FF 
        ///F1 01 C0 F6 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tLight_bin {
            get {
                return ResourceManager.GetString("tLight_bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; -------------------------------------------------------------------------
        ///;  CONTROL THE TRAFFIC LIGHTS.
        ///; -------------------------------------------------------------------------
        ///;  This simple example does not step the lights realistically.
        ///;  It lacks a time delay facility.
        ///;  It would be better to use a data table.
        ///;  It works otherwise! 
        ///;  Solving this properly is one of the learning tasks.
        ///; -------------------------------------------------------------------------
        ///;	CLO		; Close unwanted  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tLight99 {
            get {
                return ResourceManager.GetString("tLight99", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to D0 00 84 F1 01 D0 00 C8 
        ///F1 01 D0 00 30 F1 01 D0 
        ///00 58 F1 01 C0 EC 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00 00 00 
        ///00 00 00 00 00 00  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tLight99_bin {
            get {
                return ResourceManager.GetString("tLight99_bin", resourceCulture);
            }
        }
    }
}
